// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  name       String
  role       String      @default("USER")
  created_at DateTime?   @default(now())
  password   String
  challenges Challenge[]
}

model Question {
  id         Int                 @id @default(autoincrement())
  question   String
  created_at DateTime?           @default(now())
  score      Float
  options    Option[]
  answer     Answer?
  challeges  ChallengeQuestion[]
}

model Option {
  id               Int                      @id @default(autoincrement())
  question_id      Int
  option           String
  question         Question                 @relation(fields: [question_id],onDelete: Cascade, references: [id])
  answer           Answer?
  created_at       DateTime?                @default(now())
  challenge_answer ChallegeQuestionAnswer[]
}

model Answer {
  id          Int       @id @default(autoincrement())
  question_id Int       @unique
  question    Question  @relation(fields: [question_id],onDelete: Cascade, references: [id])
  option_id   Int       @unique
  option      Option    @relation(fields: [option_id],onDelete: Cascade, references: [id])
  created_at  DateTime? @default(now())
}

model Challenge {
  id         Int                 @id @default(autoincrement())
  user_id    Int
  user       User                @relation(fields: [user_id], references: [id])
  score      Float
  created_at DateTime?           @default(now())
  questions  ChallengeQuestion[]
  duration   Int?                @default(1)
}

model ChallengeQuestion {
  id           Int       @id @default(autoincrement())
  challenge_id Int
  challenge    Challenge @relation(fields: [challenge_id], references: [id])
  question_id  Int
  question     Question  @relation(fields: [question_id], references: [id])

  answer ChallegeQuestionAnswer?

  @@unique([question_id, challenge_id])
}

model ChallegeQuestionAnswer {
  id                   Int               @id @default(autoincrement())
  challege_question_id Int               @unique
  option_id            Int               @unique
  challege_question    ChallengeQuestion @relation(fields: [challege_question_id], references: [id])
  option               Option            @relation(fields: [option_id], references: [id])
}
